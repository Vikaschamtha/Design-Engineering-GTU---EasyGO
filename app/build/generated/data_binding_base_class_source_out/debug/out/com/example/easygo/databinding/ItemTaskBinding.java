// Generated by view binder compiler. Do not edit!
package com.example.easygo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.easygo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemTaskBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout containerLL;

  @NonNull
  public final TextView taskDateTv;

  @NonNull
  public final TextView taskDescriptionTv;

  @NonNull
  public final TextView taskNameTv;

  @NonNull
  public final TextView taskStatusTv;

  @NonNull
  public final TextView taskTimeTv;

  private ItemTaskBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout containerLL,
      @NonNull TextView taskDateTv, @NonNull TextView taskDescriptionTv,
      @NonNull TextView taskNameTv, @NonNull TextView taskStatusTv, @NonNull TextView taskTimeTv) {
    this.rootView = rootView;
    this.containerLL = containerLL;
    this.taskDateTv = taskDateTv;
    this.taskDescriptionTv = taskDescriptionTv;
    this.taskNameTv = taskNameTv;
    this.taskStatusTv = taskStatusTv;
    this.taskTimeTv = taskTimeTv;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemTaskBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemTaskBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_task, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemTaskBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayout containerLL = (LinearLayout) rootView;

      id = R.id.taskDateTv;
      TextView taskDateTv = ViewBindings.findChildViewById(rootView, id);
      if (taskDateTv == null) {
        break missingId;
      }

      id = R.id.taskDescriptionTv;
      TextView taskDescriptionTv = ViewBindings.findChildViewById(rootView, id);
      if (taskDescriptionTv == null) {
        break missingId;
      }

      id = R.id.taskNameTv;
      TextView taskNameTv = ViewBindings.findChildViewById(rootView, id);
      if (taskNameTv == null) {
        break missingId;
      }

      id = R.id.taskStatusTv;
      TextView taskStatusTv = ViewBindings.findChildViewById(rootView, id);
      if (taskStatusTv == null) {
        break missingId;
      }

      id = R.id.taskTimeTv;
      TextView taskTimeTv = ViewBindings.findChildViewById(rootView, id);
      if (taskTimeTv == null) {
        break missingId;
      }

      return new ItemTaskBinding((LinearLayout) rootView, containerLL, taskDateTv,
          taskDescriptionTv, taskNameTv, taskStatusTv, taskTimeTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
